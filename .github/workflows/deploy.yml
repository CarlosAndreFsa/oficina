name: Deploy CI/CD

on:
  pull_request:
    branches: [ "master", "stage" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Install Node Dependencies
        run: pnpm install

      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Create Database
        run: |
          mkdir -p ${{ github.workspace }}/database
          touch ${{ github.workspace }}/database/database.sqlite
          ls -la ${{ github.workspace }}/database

      - name: Generate key
        run: php artisan key:generate

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Build assets
        run: pnpm run build

      - name: Clear Composer Cache
        run: composer clear-cache

      - name: Clear PNPM Cache
        run: pnpm store prune

      - name: Cache views
        run: |
          php artisan view:clear
          php artisan view:cache

      - name: Check Code Style with Pint
        run: ./vendor/bin/pint --test

      - name: Execute tests (Unit and Feature tests) via PEST
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ${{ github.workspace }}/database/database.sqlite
          # Your AWS Environment Variables
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_BUCKET: ${{ secrets.AWS_BUCKET }}
          AWS_USE_PATH_STYLE_ENDPOINT: ${{ secrets.AWS_USE_PATH_STYLE_ENDPOINT }}
        run: vendor/bin/pest --parallel

  create-tag:
    if: github.event.pull_request.base.ref == 'master'
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check out the repo
        run: git fetch --prune --unshallow --tags

      - name: Create and push tag
        id: create_tag
        run: |
          LATEST_TAG=$(git tag | sort -V | tail -n1)
          echo "Latest tag: $LATEST_TAG"
          IFS='.' read -ra PARTS <<< "${LATEST_TAG#v}"
          MAJOR="${PARTS[0]}"
          MINOR="${PARTS[1]}"
          PATCH="${PARTS[2]}"
          NEW_PATCH=$((PATCH + 1))
          if [ $NEW_PATCH -eq 10 ]; then
            NEW_PATCH=0
            MINOR=$((MINOR + 1))
          fi
          if [ $MINOR -eq 10 ]; then
            MINOR=0
            MAJOR=$((MAJOR + 1))
          fi
          NEW_TAG="v$MAJOR.$MINOR.$NEW_PATCH"
          echo "New tag: $NEW_TAG"
          echo ::set-output name=new_tag::$NEW_TAG
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
